apiVersion: v1
kind: ConfigMap
metadata:
  name: logger-cm
  namespace: graylog
data:
  logger.py: |
    import logging, sys, time
    from logging import config
    from random import randint

    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            "syslog": {
                "format": "%(asctime)s:%(levelname)s:%(process)d:%(filename)s:%(funcName)s:L%(lineno)d:%(message)s"
            }
        },
        'handlers': {
            'logfile': {
                'class': 'logging.StreamHandler',
                'stream': sys.stdout,
                'formatter': 'syslog',
                },
            'stdout': {
                'class': 'logging.StreamHandler',
                'stream': open('/var/log/app/mylog.log','a+'),
                'formatter': 'syslog',
                },
            },
        'loggers': {
            'my-logger': {
                'handlers': ['logfile', 'stdout'],
                'level': logging.DEBUG,
                'propagate': True,
                },
            }
        }

    config.dictConfig(LOGGING)

    logger = logging.getLogger("my-logger")
    counter = 0
    sleep = 0

    while True:
        msg_type = randint(0, 4)
        if(msg_type == 0):
            logger.debug("This is a debug msg number {0} after {1}s".format(counter, sleep))
        if(msg_type == 1):
            logger.info("This is a info msg number {0} after {1}s".format(counter, sleep))
        if(msg_type == 2):
            logger.warning("This is a warn msg number {0} after {1}s".format(counter, sleep))
        if(msg_type == 3):
            logger.error("This is a error msg number {0} after {1}s".format(counter, sleep))
        if(msg_type == 4):
            logger.critical("This is a error msg number {0} after {1}s".format(counter, sleep))

        counter = counter + 1
        sleep = randint(0, 30)
        time.sleep(sleep)

---

apiVersion: v1
kind: Pod
metadata:
  name: app-with-sidecar
  namespace: graylog
spec:
  nodeSelector:
    kubernetes.io/arch: arm64
  containers:
  - image: python:3
    name: app
    command: ['sh', '-c', 'python /var/static/logger.py']
    volumeMounts:
    - name: static-volume
      mountPath: /var/static
    - name: log-volume
      mountPath: /var/log/app
  - image: medinvention/graylog-sidecar-filebeat:1.2.0
    name: sidecar
    imagePullPolicy: Always
    env:
    - name: GS_SERVER_URL
      value: --<GRAYLOG-HOST>--/api
    - name: GS_LIST_LOG_FILES
      value: "/app-log"
    - name: GS_API_TOKEN
      value: --<GRAYLOG-SIDECARE-API-TOKEN>--
    - name: GS_NAME
      value: "myapp"
    - name: GS_NODE_ID
      value: --<GRAYLOG-SIDECARE-ID>--
    volumeMounts:
    - mountPath: /app-log
      name: log-volume
  volumes:
  - name: log-volume
    emptyDir: {}
  - name: static-volume
    configMap:
      name: logger-cm